The following iptables rules are needed in your firewall. Add them to your system's firewall scripts, or alternatively put them in their own file, make it executable, and force it to run at system startup.

# Create internet chain# This is used to authenticate users who have already signed up
IPTABLES=/sbin/iptables

# First send all traffic via newly created internet chain
# At the prerouting NAT stage this will DNAT them to the local
# webserver for them to signup if they aren't authorised
# Packets for unauthorised users are marked for dropping later
$IPTABLES -N internet -t mangle

###### INTERNET CHAIN ##########
# Allow authorised clients in, redirect all others to login webserver
# Add known users to the NAT table to stop their dest being rewritten
# Ignore MAC address with a * - these users are blocked
# This awk script goes through the /var/lib/users flat file line by line
$IPTABLES -t mangle -A PREROUTING -j internet
awk 'BEGIN { FS="\t"; } { system("$IPTABLES -t mangle -A internet -m mac --mac-source "$4" -j RETURN"); }' /var/lib/users# MAC address not found. Mark the packet 99$IPTABLES -t mangle -A internet -j MARK --set-mark 99################################# Redirects web requests from Unauthorised users to logon Web Page$IPTABLES -t nat -A PREROUTING -m mark --mark 99 -p tcp --dport 80 -j DNAT --to-destination 10.0.0.1# Now that we've got to the forward filter, drop all packets# marked 99 - these are unknown users. We can't drop them earlier# as there's no filter table$IPTABLES -t filter -A FORWARD -m mark --mark 99 -j DROP# Do the same for the INPUT chain to stop people accessing the web through Squid$IPTABLES -t filter -A INPUT -p tcp --dport 80 -j ACCEPT$IPTABLES -t filter -A INPUT -p udp --dport 53 -j ACCEPT$IPTABLES -t filter -A INPUT -m mark --mark 99 -j DROP# Enable Internet connection sharingecho "1" > /proc/sys/net/ipv4/ip_forward$IPTABLES -A FORWARD -i ppp0 -o eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT$IPTABLES -A FORWARD -i eth0 -o ppp0 -j ACCEPT$IPTABLES -t nat -A POSTROUTING -o ppp0 -j MASQUERADESetting up rmtrack
rmtrack is a one line script to remove connection track information about a client. If this script is not present then when the redirect is done on the completion of a user signing up, they may still not be able to access the page they were looking for. For example, if they go to www.google.com, they will first be redirected to the signup page on the local webserver. When the signup page redirects them back to Google, if the tracking information has not been cleared then they may end up back at the signup page, even though they've already signed up.
Create the file /usr/bin/rmtrack and make it executable with the following contents:
/usr/sbin/conntrack -L \ |grep $1 \ |grep ESTAB \ |grep 'dport=80' \ |awk \ "{ system(\"conntrack -D --orig-src $1 --orig-dst \" \ substr(\$6,5) \" -p tcp --orig-port-src \" substr(\$7,7) \" \ --orig-port-dst 80\"); }"
Note: the single command has been split over several lines
Configuring sudo
Sudo needs to be configured to allow the apache web server to issue certain iptables commands in order to allow clients to access the internet after they have signed up. Use visudo to add the following commands to the sudoers file:
www-data ALL = NOPASSWD: /sbin/iptables -I internet 1 -t nat -m mac --mac-source ??\:??\:??\:??\:??\:?? -j RETURNwww-data ALL = NOPASSWD: /sbin/iptables -D internet -t nat -m mac --mac-source ??\:??\:??\:??\:??\:?? -j RETURNwww-data ALL = NOPASSWD: /usr/bin/rmtrack [0-9]*.[0-9]*.[0-9]*.[0-9]*
Note: Sudo does not use regular expressions, so the final rule is not as preferable as it should be.